#!/usr/bin/env node

'use strict'

const rollup = require('rollup')
const buble = require('rollup-plugin-buble')
const flow = require('rollup-plugin-flow')
const strip = require('rollup-plugin-strip')
const uglify = require('rollup-plugin-uglify')
const node = require('rollup-plugin-node-resolve')
const filesize = require('rollup-plugin-filesize')
const { Dictionary } = require('uglify-js')

const path = require('path')
const minimist = require('minimist')

const options = {
  strict: false,
  minify: false,
  format: 'cjs',
  out: 'build'
}

Object.assign(options, minimist(process.argv.slice(2)))

const plugins = [
  flow(),
  buble(),
  node(),
  filesize()
]

const configs = {
  ActionButton: path.resolve('src/addons/action-button.js'),
  ActionForm: path.resolve('src/addons/action-form.js'),
  Indexing: path.resolve('src/addons/indexing.js'),
  JestMatchers: path.resolve('src/addons/jest-matchers.js'),
  Microcosm: path.resolve('src/microcosm.js'),
  Model: path.resolve('src/addons/model.js'),
  Presenter: path.resolve('src/addons/presenter.js'),
  withSend: path.resolve('src/addons/with-send.js')
}

if (!options.strict) {
  plugins.push(
    strip({
      debugger: true,
      functions: ['console.assert'],
      sourceMap: true
    })
  )
}

if (options.minify) {
  plugins.push(
    uglify({
      compress: {
        passes: 2
      },
      mangle: {
        toplevel: true,
        properties: {
          regex: /^_/,
          cache: {
            cname: -1,
            props: new Dictionary()
          }
        }
      }
    })
  )
}

const external = ['react', 'react-dom', 'form-serialize']

const globals = {
  react: 'React',
  'form-serialize': 'FormSerialize'
}

Object.keys(configs).forEach(key => {
  var entry = configs[key]

  globals[entry] = key
  external.push(entry)
})

for (let moduleName in configs) {
  let entry = configs[moduleName]
  let dest = entry.replace('src', options.out)

  let bundler = rollup.rollup({
    entry: entry,
    plugins: plugins,
    external: external.filter(path => path !== entry)
  })

  let write = bundler.then(bundle => {
    return bundle.write({
      globals: globals,
      dest: dest,
      format: options.format,
      moduleName: moduleName,
      moduleID: path.basename(entry, '.js'),
      sourceMap: true
    })
  })

  write.catch(error => console.error(error.toString()))
}
